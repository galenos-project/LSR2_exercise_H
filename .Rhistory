#Load packages
library(meta)
library(readr)
library(readxl)
#Import dataset
prevelance_data_main<- read_xlsx("C:/Users/simon/OneDrive/Desktop/moh review/PTSD prevelance data.xlsx")
MAcases <- metaprop(
event = N_PTSD,     # Number of PTSD cases (calculated from proportion * sample)
n = N_total,             # Total sample size
studlab = Study,       # Study labels (Author names)
data = prevelance_data_main,            # Dataframe with the PTSD data
sm = "PLOGIT",          # Logit transformation for proportions
method = "GLMM",        # Random effects model
comb.fixed = FALSE,     # Use random-effects model
comb.random = TRUE,     # Combine using random-effects model
prediction = TRUE,      # Provide prediction interval
hakn = TRUE             # Use Hartung-Knapp adjustment
)
forest(MAcases,
xlab = "PTSD Prevalence (Proportion)",
sortvar = Study,
leftlabs = c("Study", "N", "Prevalence_n"),
colgap = "0.5cm")
summary(MAcases)
View(prevelance_data_main)
prevelance_data_main$Education <- as.factor(prevelance_data_main$Education)
library(meta)
MA_edu <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = prevelance_data_main,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
byvar = Education,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
library(meta)
MA_edu <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = prevelance_data_main,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
subgroup = Education,
byvar = Education,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
View(prevelance_data_main)
prevelance_data_subgroup <- subset(prevelance_data_main, !is.na(Education))
prevelance_data_subgroup <- subset(prevelance_data_main, !is.na(Education))
prevelance_data_subgroup$Education <- as.factor(prevelance_data_subgroup$Education)
library(meta)
MA_edu <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = prevelance_data_subgroup,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
byvar = Education,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
forest(MA_edu,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "N", "PTSD Cases"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
forest(MA_edu,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "N", "PTSD Cases"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
```{r echo=TRUE, fig.fullwidth=T, fig.width=13, fig.height=6}
forest(MA_edu,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "N", "PTSD Cases"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
forest(MA_edu,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "N", "PTSD Cases"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
forest(MA_edu,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "N", "PTSD Cases"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
subgroup_education <- subset(subgroup_education, !is.na(Education))
subgroup_education <- subset(prevelance_data_main, !is.na(Education))
setwd("C:/Users/simon/OneDrive/Desktop/moh review")
knitr::opts_chunk$set(echo = TRUE)
#Load packages
library(meta)
library(readr)
library(readxl)
#Import dataset
prevelance_data_main<- read_xlsx("C:/Users/simon/OneDrive/Desktop/moh review/PTSD prevelance data.xlsx")
setwd("C:/Users/simon/OneDrive/Desktop/moh review")
knitr::opts_chunk$set(echo = TRUE)
#Load packages
library(meta)
library(readr)
library(readxl)
#Import dataset
prevelance_data_main<- read_xlsx("C:/Users/simon/OneDrive/Desktop/moh review/PTSD prevelance data.xlsx")
# Now, perform the meta-analysis with the correct counts
# Meta-analysis for PTSD prevalence
MAcases <- metaprop(
event = N_PTSD,     # Number of PTSD cases (calculated from proportion * sample)
n = N_total,             # Total sample size
studlab = Study,       # Study labels (Author names)
data = prevelance_data_main,            # Dataframe with the PTSD data
sm = "PLOGIT",          # Logit transformation for proportions
method = "GLMM",        # Random effects model
comb.fixed = FALSE,     # Use random-effects model
comb.random = TRUE,     # Combine using random-effects model
prediction = TRUE,      # Provide prediction interval
hakn = TRUE             # Use Hartung-Knapp adjustment
)
#Forest plot
forest(MAcases,
xlab = "PTSD Prevalence (Proportion)",
sortvar = Study,
leftlabs = c("Study", "N", "Prevalence_n"),
colgap = "0.5cm")
subgroup_education <- subset(prevelance_data_main, !is.na(Education))
subgroup_education$Education <- as.factor(subgroup_education$Education)
library(meta)
MA_edu <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = subgroup_education,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
byvar = Education,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
forest(MA_edu,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "PTSD Cases", "N"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
subgroup_WBC <- subset(prevelance_data_main, !is.na(World_bank_category))
subgroup_WBC$Education <- as.factor(subgroup_WBC$Education)
library(meta)
MA_edu <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = subgroup_WBC,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
byvar = World_bank_category,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
subgroup_WBC <- subset(prevelance_data_main, !is.na(World_bank_category))
subgroup_WBC$World_bank_category <- as.factor(subgroup_WBC$World_bank_category)
library(meta)
MA_WBC <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = subgroup_WBC,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
byvar = World_bank_category,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
forest(MA_WBC,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "PTSD Cases", "N"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
subgroup_admin <- subset(prevelance_data_main, !is.na(Administration))
subgroup_admin$Administration <- as.factor(subgroup_admin$Administration)
MA_admin <- metaprop(
event = N_PTSD,
n = N_total,
studlab = Study,
data = subgroup_admin,
sm = "PLOGIT",
method = "GLMM",
comb.fixed = FALSE,
comb.random = TRUE,
prediction = TRUE,
hakn = TRUE,
byvar = Administration,  # subgrouping variable
print.byvar = TRUE  # prints subgroup name in forest plot
)
forest(MA_admin,
sortvar = Study,  # Sort by study name
xlab = "PTSD Prevalence (Proportion)",
leftlabs = c("Study", "PTSD Cases", "N"),
colgap = "0.5cm",
print.byvar = TRUE,
rightcols = c("effect", "ci"),
overall = TRUE,
overall.hetstat = TRUE)
setwd("C:/Users/simon/OneDrive/Desktop/moh review")
prevelance_data_main$Female_perc <- as.numeric(prevelance_data_main$Female_perc)
setwd("C:/Users/simon/OneDrive/Desktop/moh review")
knitr::opts_chunk$set(echo = TRUE)
#Load packages
library(meta)
library(readr)
library(readxl)
prevalence_data_main<- read_xlsx("C:/Users/simon/OneDrive/Desktop/moh review/PTSD prevalence data.xlsx")
setwd("C:/Users/simon/OneDrive/Desktop/moh review")
prevalence_data_main<- read_xlsx("C:/Users/simon/OneDrive/Desktop/moh review/PTSD prevalence data.xlsx")
source("C:/Users/simon/OneDrive/Desktop/Galenos/LS2/data/R.data.files/extra.R")
prevalence_data_main<- read_xlsx("C:/Users/simon/OneDrive/Desktop/moh review/PTSD prevalence data.xlsx")
getwd()
bubble(meta_age_reg,
studlab = TRUE,
xlab = "Mean Age of Participants",
ylab = "Logit Transformed PTSD Prevalence",
main = "Meta-Regression: Mean Age vs PTSD Prevalence",
cex = 1.2,                  # Bubble size
cex.studlab = 0.7,          # Font size for study labels
col = "blue",               # Bubble border
bg = "lightgray",           # Bubble fill
pch = 21,                   # Filled circle
col.line = "darkgreen",     # Regression line color
lwd = 2,                    # Line width
lty = 1                     # Solid line
)
setwd("C:/Users/simon/Desktop/Github rep/LSR2_exercise_H/")
setwd("C:/Users/simon/Desktop/Github rep/LSR2_exercise_H/")
setwd("C:/Users/simon/Desktop/Github rep/LSR2_exercise_H/")
setwd("C:/Users/simon/OneDrive/Desktop/LSR2 data april 15th 25/")
getwd()
setwd("C:/Users/simon/Desktop/Github rep/LSR2_exercise_H/")
setwd("C:/Users/simon/Desktop/Github rep/LSR2_exercise_H")
setwd("C:/Users/simon/Desktop/Github rep/LSR2_exercise_H/")
setwd("C:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/")
setwd("C:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/")
LSR2_data_long <- read_excel("data/Rdata_1st_iteration.xlsx")
library(meta)
library(tidyr)
library(tibble)
library(stringr)
library(readxl)
library(grid)
library(dplyr)
library(Matrix)
library(knitr)
library(kableExtra)
library(rms)
library(meta)
library(devtools)
library(tools)
library(metafor)
library(gtools)
library(metasens)
library(robvis)
library(PRISMA2020)
library(writexl)
LSR2_data_long <- read_excel("data/Rdata_1st_iteration.xlsx")
LSR2_data_long <- read_excel("/data/Rdata_1st_iteration.xlsx")
##Import data
###Import long Rdata_LSR2_2nd_iteration
LSR2_data_long <- read_excel("data/Rdata_1st_iteration.xlsx")
getwd()
LSR2_data_long <- read_excel("/data/Rdata_1st_iteration.xlsx")
LSR2_data_long <- read_excel("C:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/Rdata_1st_iteration.xlsx")
prisma <- read_xlsx("data for tables/LSR2_H_PRISMA_100344.xlsx")
prisma <- read_xlsx("/data/data for tables/LSR2_H_PRISMA_100344.xlsx")
prisma <- read_xlsx("/data/data for tables/LSR2_H_PRISMA_100344.xlsx")
prisma <- read_xlsx("c:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/data for tables/LSR2_H_PRISMA_100344.xlsx")
library(meta)
library(tidyr)
library(tibble)
library(stringr)
library(readxl)
library(grid)
library(dplyr)
library(Matrix)
library(knitr)
library(kableExtra)
library(rms)
library(meta)
library(devtools)
library(tools)
library(metafor)
library(gtools)
library(metasens)
library(robvis)
library(PRISMA2020)
library(writexl)
library(meta)
library(tidyr)
library(tibble)
library(stringr)
library(readxl)
library(grid)
library(dplyr)
library(Matrix)
library(knitr)
library(kableExtra)
library(rms)
library(meta)
library(devtools)
library(tools)
library(metafor)
library(gtools)
library(metasens)
library(robvis)
library(PRISMA2020)
library(writexl)
LSR2_data_long <- read_excel("C:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/Rdata_1st_iteration.xlsx")
###Round off results to two digits
settings.meta(digits = 2)
#CREATE DATAFRAME PTSD and dropout MA dataframe wide (wks)
### Select studies with Arm
ptsd_ma_avail_long <-subset(LSR2_data_long, included_ptsd_ma == "yes")
ptsd_ma_insuf_long <-subset(LSR2_data_long, included_ptsd_ma == "no")
#PTSD dataset insufficient data
### select variables for ptsd_insuf
ptsd_insuf_long = ptsd_ma_insuf_long %>%
select(
Study,
StudyN,
Intervention,
totN_random,
Arm
)
### Select studies with treatments
ptsd_insuf_exercise <-subset(ptsd_insuf_long, Arm == "exercise")
ptsd_insuf_control <-subset(ptsd_insuf_long , Arm == "control")
### Merge datasets
ptsd_insuf = merge(ptsd_insuf_exercise, ptsd_insuf_control, by = "StudyN", suffixes = c("_tg", "_cg"))
### Drop variables ptsd_ma_variables
ptsd_insuf <- ptsd_insuf %>%
select(
-Arm_tg,
-Arm_cg,
-totN_random_cg,
- Study_cg,
)
### Rename some ptsd_ma_variables
ptsd_insuf <- ptsd_insuf %>%
rename(
Study = Study_tg,
totN_random = totN_random_tg,
)
###Drop unneccesary dataframes
rm(ptsd_insuf_control, ptsd_insuf_exercise, ptsd_insuf_long)
#PTSD dataset for MA
### select the variables for ptsd_ma
ptsd_ma_long = ptsd_ma_avail_long %>%
select(
Study,
StudyN,
Intervention,
Arm,
totN_random,
N_random,
dropout_any_n,
N_demo_baseline,
N_completers,
N_dropout,
timepoint_units,
design,
intervention_length,
intervention_length_units,
condition,
Exercise_type,
EXE_augment,
intensity_EX,
exercise_n_session,
female_n,
AGEm_study,
AGEm_arm,
AGEsd_arm,
PTSD3_questionnaire,
PTSD3_questionnaire_type,
PTSD3_baseline_n,
PTSD3_baseline_m,
PTSD3_baseline_sd,
PTSD3_posttest_n,
PTSD3_posttest_m,
PTSD3_posttest_sd,
rob_ptsd,
year
)
### create mean change score for each arm (ptsd3_meanchange)
ptsd_ma_long$ptsd3_meanchange = ptsd_ma_long$PTSD3_posttest_m - ptsd_ma_long$PTSD3_baseline_m
### create SD of the change score (set r to 0.5)
ptsd_ma_long$ptsd3_sdchange = sqrt(ptsd_ma_long$PTSD3_baseline_sd^2 + ptsd_ma_long$PTSD3_posttest_sd^2 - (2 * 0.5 * ptsd_ma_long$PTSD3_baseline_sd * ptsd_ma_long$PTSD3_posttest_sd))
### Select studies with treatments
ptsd_ma_exercise <-subset(ptsd_ma_long, Arm == "exercise")
ptsd_ma_control <-subset(ptsd_ma_long , Arm == "control")
### Merge datasets
ptsd_ma = merge(ptsd_ma_exercise, ptsd_ma_control, by = "StudyN", suffixes = c("_tg", "_cg"))
### Drop variables ptsd_ma_variables
ptsd_ma <- ptsd_ma %>%
select(
-Study_cg,
-Arm_tg,
-Arm_cg,
-totN_random_cg,
-timepoint_units_cg,
-design_cg,
-intervention_length_cg,
-intervention_length_units_cg,
-condition_cg,
-Exercise_type_cg,
-EXE_augment_cg,
-intensity_EX_cg,
-exercise_n_session_cg,
-AGEm_study_cg,
-PTSD3_questionnaire_cg,
-PTSD3_questionnaire_type_cg,
-rob_ptsd_cg,
-year_cg
)
### Rename some ptsd_ma_variables
ptsd_ma <- ptsd_ma %>%
rename(
Study = Study_tg,
totN_random = totN_random_tg,
timepoint_units = timepoint_units_tg,
design = design_tg,
intervention_length = intervention_length_tg,
intervention_length_units = intervention_length_units_tg,
condition = condition_tg,
Exercise_type = Exercise_type_tg,
EXE_augment = EXE_augment_tg,
intensity_EX = intensity_EX_tg,
exercise_n_session = exercise_n_session_tg,
AGEm_study = AGEm_study_tg,
PTSD3_questionnaire = PTSD3_questionnaire_tg,
PTSD3_questionnaire_type = PTSD3_questionnaire_type_tg,
rob_ptsd = rob_ptsd_tg,
year = year_tg
)
###Drop unneccesary dataframes
rm(ptsd_ma_control, ptsd_ma_exercise, ptsd_ma_long)
#PTSD dataset for rob sensitivity analysis (no high risk of bias)
ptsdma_sensitiv_rob <- subset(ptsd_ma, rob_ptsd != "High")
#Table:PRISMA
prisma <- read_xlsx("c:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/data for tables/LSR2_H_PRISMA_100344.xlsx")
prisma<-PRISMA_data(prisma)
#Table:intervention_table
intervention_table <- read_excel("c:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/data for tables/intervention_table.xlsx")
#Table:rob figure
rob <- read_xlsx("c:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/data for tables/LSR2_robptsd_260124.xlsx")
#Table:study_characteristics_table_all
study_characteristics_table_all <- read_excel("c:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/data for tables/study_characteristics_table_all.xlsx")
#Table:SoE
LSR2_SoE_250324 <- read_xlsx("c:/Users/simon/OneDrive/Desktop/Github rep/LSR2_exercise_H/data/data for tables/LSR2_SoE_250324.xlsx")
length(table(ptsd_ma$Study))+length(table(ptsd_insuf$Study))
length(table(ptsd_ma$Study))
length(table(ptsd_ma$Study))+length(table(ptsd_insuf$Study))
length(table(ptsd_ma$Study))+length(table(ptsd_insuf$Study))
length(table(ptsd_ma$StudyN))+length(table(ptsd_insuf$StudyN))
